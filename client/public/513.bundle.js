"use strict";(self.webpackChunkweb_app=self.webpackChunkweb_app||[]).push([[513],{544:function(__unused_webpack_module,exports,__webpack_require__){eval('\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = exports.Teams = void 0;\nvar _NavBar = _interopRequireDefault(__webpack_require__(8334));\nvar _react = _interopRequireWildcard(__webpack_require__(7294));\nvar _reactRedux = __webpack_require__(6706);\nvar _Page = _interopRequireDefault(__webpack_require__(5694));\nvar _selectors = __webpack_require__(6657);\nvar _nation = __webpack_require__(6381);\nvar _Pagination = _interopRequireDefault(__webpack_require__(580));\nvar _material = __webpack_require__(9961);\nvar _reactRouterDom = __webpack_require__(9818);\nvar _EnhancedTable = _interopRequireDefault(__webpack_require__(2265));\nvar _util = __webpack_require__(1054);\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar MAX_ROWS_PER_PAGE = 50;\nvar COLUMN_TO_EXCLUDE = ["uid"];\nvar Teams = function Teams(props) {\n  var navigate = (0, _reactRouterDom.useNavigate)();\n  var dispatch = (0, _reactRedux.useDispatch)();\n  var nations = props.nations;\n  var _useState = (0, _react.useState)(1),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentPage = _useState2[0],\n    setCurrentPage = _useState2[1];\n  var _useState3 = (0, _react.useState)("All"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    continentFilter = _useState4[0],\n    setContinentFilter = _useState4[1];\n  (0, _react.useEffect)(function () {\n    // dispatch both actions at the same time to get the data faster\n    dispatch((0, _nation.getNationsRequest)());\n    dispatch((0, _nation.getContinentsRequest)());\n    return function () {\n      // cleanup\n      window.filteredNationsLength = 0;\n    };\n  }, [dispatch]);\n  var onRowClick = function onRowClick(nation) {\n    var actualNation = (0, _util.getCharactersFromString)(nation.Country);\n\n    // make nation country be actualNation\n    navigate("/teams/" + actualNation);\n  };\n  var handlePageClick = function handlePageClick(event, page) {\n    setCurrentPage(event);\n  };\n\n  // use memo run first time and then only when the dependencies change\n  var filteredNations = (0, _react.useMemo)(function () {\n    // filter by continent\n    var filteredNations = nations.filter(function (nation) {\n      if (continentFilter === "All") {\n        return true;\n      }\n      return nation.Continent === continentFilter;\n    });\n\n    // keep a reference of the filtered nations length before we slice it for pagination\n    var filteredNationsLength = filteredNations.length;\n    window.filteredNationsLength = filteredNationsLength;\n\n    // filter by page\n    filteredNations = filteredNations.slice((currentPage - 1) * MAX_ROWS_PER_PAGE, (currentPage - 1) * MAX_ROWS_PER_PAGE + MAX_ROWS_PER_PAGE);\n    return filteredNations;\n  }, [nations, currentPage, continentFilter]);\n\n  // if nations is empty, return null\n  if (nations.length === 0) {\n    return /*#__PURE__*/_react.default.createElement(_Page.default, {\n      title: "Teams"\n    }, /*#__PURE__*/_react.default.createElement(_NavBar.default, null), /*#__PURE__*/_react.default.createElement(_material.Typography, {\n      variant: "h1"\n    }, "Teams"), /*#__PURE__*/_react.default.createElement(_material.Typography, {\n      variant: "h2"\n    }, "Loading..."));\n  }\n\n  /* get properties of the first nation */\n  var columns = Object.keys(nations[0]).map(function (key) {\n    return {\n      id: key,\n      label: key,\n      minWidth: 170,\n      align: "center",\n      format: function format(value) {\n        return value.toLocaleString("en-US");\n      }\n    };\n  });\n\n  /* remove uid from columns */\n  columns = columns.filter(function (column) {\n    return !COLUMN_TO_EXCLUDE.includes(column.id);\n  });\n  return /*#__PURE__*/_react.default.createElement(_Page.default, null, /*#__PURE__*/_react.default.createElement(_NavBar.default, null), /*#__PURE__*/_react.default.createElement("div", {\n    style: {\n      display: "flex",\n      justifyContent: "left",\n      gap: "16px",\n      padding: "16px 0"\n    }\n  }, props.continents.map(function (continent) {\n    return /*#__PURE__*/_react.default.createElement(_material.Tooltip\n    // make the tooltip show that user can click to un/select\n    , {\n      title: continentFilter === continent ? "Click to deselect" : "Click to select",\n      key: continent\n      // add position to make the tooltip show on top of the button\n      ,\n      placement: "top"\n    }, /*#__PURE__*/_react.default.createElement("button", {\n      key: continent,\n      onClick: function onClick() {\n        if (continentFilter === continent) {\n          setContinentFilter("All");\n          setCurrentPage(1);\n          return;\n        }\n        // set the filter\n        setCurrentPage(1);\n        setContinentFilter(continent);\n      },\n      style: {\n        backgroundColor: continentFilter === continent ? "#3f51b5" : "#FFF",\n        color: continentFilter === continent ? "#FFF" : "#3f51b5",\n        border: "1px solid #3f51b5",\n        borderRadius: "5px",\n        // make them bigger\n        padding: "8px 16px",\n        // make them bold\n        fontWeight: "bold",\n        "&:hover": {\n          backgroundColor: "#3f51b5",\n          color: "#FFF",\n          // change the mouse to pointer\n          cursor: "pointer",\n          position: "relative"\n        },\n        "&:focus": {\n          outline: "none"\n        }\n      }\n    }, continent));\n  })), /*#__PURE__*/_react.default.createElement(_EnhancedTable.default, {\n    rows: filteredNations,\n    columns: columns,\n    onRowClick: onRowClick,\n    preSort: false\n  }), /*#__PURE__*/_react.default.createElement("div", {\n    style: {\n      position: "sticky",\n      bottom: 0,\n      display: "flex",\n      justifyContent: "center",\n      gap: "16px",\n      py: "16px",\n      backgroundColor: "#FFF"\n    }\n  }, /*#__PURE__*/_react.default.createElement(_Pagination.default, {\n    page: currentPage,\n    totalPages:\n    // based on continent filter\n    continentFilter === "All" ? Math.ceil(nations.length / MAX_ROWS_PER_PAGE) : Math.ceil(window.filteredNationsLength / MAX_ROWS_PER_PAGE),\n    onChangePage: handlePageClick,\n    rowsPerPage: 10\n  })));\n};\nexports.Teams = Teams;\nTeams.propTypes = {};\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    nations: (0, _selectors.getNations)(state),\n    continents: (0, _selectors.getContinents)(state)\n  };\n};\nvar mapDispatchToProps = {\n  // getNationsRequest,\n  getNations: _selectors.getNations\n};\nvar _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Teams);\nexports["default"] = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///544\n')},9688:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": function() { return /* binding */ $149c1bd638913645$export$2e2bcd8739ae039; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n\n\nvar $parcel$global =\ntypeof globalThis !== \'undefined\'\n  ? globalThis\n  : typeof self !== \'undefined\'\n  ? self\n  : typeof window !== \'undefined\'\n  ? window\n  : typeof __webpack_require__.g !== \'undefined\'\n  ? __webpack_require__.g\n  : {};\n\nvar $3e40d2fd7fdb47d2$exports = {};\n/**\n * Detect Element Resize.\n * https://github.com/sdecima/javascript-detect-element-resize\n * Sebastian Decima\n *\n * Forked from version 0.5.3; includes the following modifications:\n * 1) Guard against unsafe \'window\' and \'document\' references (to support SSR).\n * 2) Defer initialization code via a top-level function wrapper (to support SSR).\n * 3) Avoid unnecessary reflows by not measuring size for scroll events bubbling from children.\n * 4) Add nonce for style element.\n **/ // Check `document` and `window` in case of server-side rendering\nlet $3e40d2fd7fdb47d2$var$windowObject;\nif (typeof window !== "undefined") $3e40d2fd7fdb47d2$var$windowObject = window;\nelse if (typeof self !== "undefined") // eslint-disable-next-line no-restricted-globals\n$3e40d2fd7fdb47d2$var$windowObject = self;\nelse $3e40d2fd7fdb47d2$var$windowObject = $parcel$global;\nlet $3e40d2fd7fdb47d2$var$cancelFrame = null;\nlet $3e40d2fd7fdb47d2$var$requestFrame = null;\nconst $3e40d2fd7fdb47d2$var$TIMEOUT_DURATION = 20;\nconst $3e40d2fd7fdb47d2$var$clearTimeoutFn = $3e40d2fd7fdb47d2$var$windowObject.clearTimeout;\nconst $3e40d2fd7fdb47d2$var$setTimeoutFn = $3e40d2fd7fdb47d2$var$windowObject.setTimeout;\nconst $3e40d2fd7fdb47d2$var$cancelAnimationFrameFn = $3e40d2fd7fdb47d2$var$windowObject.cancelAnimationFrame || $3e40d2fd7fdb47d2$var$windowObject.mozCancelAnimationFrame || $3e40d2fd7fdb47d2$var$windowObject.webkitCancelAnimationFrame;\nconst $3e40d2fd7fdb47d2$var$requestAnimationFrameFn = $3e40d2fd7fdb47d2$var$windowObject.requestAnimationFrame || $3e40d2fd7fdb47d2$var$windowObject.mozRequestAnimationFrame || $3e40d2fd7fdb47d2$var$windowObject.webkitRequestAnimationFrame;\nif ($3e40d2fd7fdb47d2$var$cancelAnimationFrameFn == null || $3e40d2fd7fdb47d2$var$requestAnimationFrameFn == null) {\n    // For environments that don\'t support animation frame,\n    // fallback to a setTimeout based approach.\n    $3e40d2fd7fdb47d2$var$cancelFrame = $3e40d2fd7fdb47d2$var$clearTimeoutFn;\n    $3e40d2fd7fdb47d2$var$requestFrame = function requestAnimationFrameViaSetTimeout(callback) {\n        return $3e40d2fd7fdb47d2$var$setTimeoutFn(callback, $3e40d2fd7fdb47d2$var$TIMEOUT_DURATION);\n    };\n} else {\n    // Counter intuitively, environments that support animation frames can be trickier.\n    // Chrome\'s "Throttle non-visible cross-origin iframes" flag can prevent rAFs from being called.\n    // In this case, we should fallback to a setTimeout() implementation.\n    $3e40d2fd7fdb47d2$var$cancelFrame = function cancelFrame([animationFrameID, timeoutID]) {\n        $3e40d2fd7fdb47d2$var$cancelAnimationFrameFn(animationFrameID);\n        $3e40d2fd7fdb47d2$var$clearTimeoutFn(timeoutID);\n    };\n    $3e40d2fd7fdb47d2$var$requestFrame = function requestAnimationFrameWithSetTimeoutFallback(callback) {\n        const animationFrameID = $3e40d2fd7fdb47d2$var$requestAnimationFrameFn(function animationFrameCallback() {\n            $3e40d2fd7fdb47d2$var$clearTimeoutFn(timeoutID);\n            callback();\n        });\n        const timeoutID = $3e40d2fd7fdb47d2$var$setTimeoutFn(function timeoutCallback() {\n            $3e40d2fd7fdb47d2$var$cancelAnimationFrameFn(animationFrameID);\n            callback();\n        }, $3e40d2fd7fdb47d2$var$TIMEOUT_DURATION);\n        return [\n            animationFrameID,\n            timeoutID\n        ];\n    };\n}\nfunction $3e40d2fd7fdb47d2$var$createDetectElementResize(nonce) {\n    let animationKeyframes;\n    let animationName;\n    let animationStartEvent;\n    let animationStyle;\n    let checkTriggers;\n    let resetTriggers;\n    let scrollListener;\n    const attachEvent = typeof document !== "undefined" && document.attachEvent;\n    if (!attachEvent) {\n        resetTriggers = function(element) {\n            const triggers = element.__resizeTriggers__, expand = triggers.firstElementChild, contract = triggers.lastElementChild, expandChild = expand.firstElementChild;\n            contract.scrollLeft = contract.scrollWidth;\n            contract.scrollTop = contract.scrollHeight;\n            expandChild.style.width = expand.offsetWidth + 1 + "px";\n            expandChild.style.height = expand.offsetHeight + 1 + "px";\n            expand.scrollLeft = expand.scrollWidth;\n            expand.scrollTop = expand.scrollHeight;\n        };\n        checkTriggers = function(element) {\n            return element.offsetWidth !== element.__resizeLast__.width || element.offsetHeight !== element.__resizeLast__.height;\n        };\n        scrollListener = function(e) {\n            // Don\'t measure (which forces) reflow for scrolls that happen inside of children!\n            if (e.target.className && typeof e.target.className.indexOf === "function" && e.target.className.indexOf("contract-trigger") < 0 && e.target.className.indexOf("expand-trigger") < 0) return;\n            const element = this;\n            resetTriggers(this);\n            if (this.__resizeRAF__) $3e40d2fd7fdb47d2$var$cancelFrame(this.__resizeRAF__);\n            this.__resizeRAF__ = $3e40d2fd7fdb47d2$var$requestFrame(function animationFrame() {\n                if (checkTriggers(element)) {\n                    element.__resizeLast__.width = element.offsetWidth;\n                    element.__resizeLast__.height = element.offsetHeight;\n                    element.__resizeListeners__.forEach(function forEachResizeListener(fn) {\n                        fn.call(element, e);\n                    });\n                }\n            });\n        };\n        /* Detect CSS Animations support to detect element display/re-attach */ let animation = false;\n        let keyframeprefix = "";\n        animationStartEvent = "animationstart";\n        const domPrefixes = "Webkit Moz O ms".split(" ");\n        let startEvents = "webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" ");\n        let pfx = "";\n        {\n            const elm = document.createElement("fakeelement");\n            if (elm.style.animationName !== undefined) animation = true;\n            if (animation === false) {\n                for(let i = 0; i < domPrefixes.length; i++)if (elm.style[domPrefixes[i] + "AnimationName"] !== undefined) {\n                    pfx = domPrefixes[i];\n                    keyframeprefix = "-" + pfx.toLowerCase() + "-";\n                    animationStartEvent = startEvents[i];\n                    animation = true;\n                    break;\n                }\n            }\n        }\n        animationName = "resizeanim";\n        animationKeyframes = "@" + keyframeprefix + "keyframes " + animationName + " { from { opacity: 0; } to { opacity: 0; } } ";\n        animationStyle = keyframeprefix + "animation: 1ms " + animationName + "; ";\n    }\n    const createStyles = function(doc) {\n        if (!doc.getElementById("detectElementResize")) {\n            //opacity:0 works around a chrome bug https://code.google.com/p/chromium/issues/detail?id=286360\n            const css = (animationKeyframes ? animationKeyframes : "") + ".resize-triggers { " + (animationStyle ? animationStyle : "") + "visibility: hidden; opacity: 0; } " + \'.resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }\', head = doc.head || doc.getElementsByTagName("head")[0], style = doc.createElement("style");\n            style.id = "detectElementResize";\n            style.type = "text/css";\n            if (nonce != null) style.setAttribute("nonce", nonce);\n            if (style.styleSheet) style.styleSheet.cssText = css;\n            else style.appendChild(doc.createTextNode(css));\n            head.appendChild(style);\n        }\n    };\n    const addResizeListener = function(element, fn) {\n        if (attachEvent) element.attachEvent("onresize", fn);\n        else {\n            if (!element.__resizeTriggers__) {\n                const doc = element.ownerDocument;\n                const elementStyle = $3e40d2fd7fdb47d2$var$windowObject.getComputedStyle(element);\n                if (elementStyle && elementStyle.position === "static") element.style.position = "relative";\n                createStyles(doc);\n                element.__resizeLast__ = {};\n                element.__resizeListeners__ = [];\n                (element.__resizeTriggers__ = doc.createElement("div")).className = "resize-triggers";\n                const expandTrigger = doc.createElement("div");\n                expandTrigger.className = "expand-trigger";\n                expandTrigger.appendChild(doc.createElement("div"));\n                const contractTrigger = doc.createElement("div");\n                contractTrigger.className = "contract-trigger";\n                element.__resizeTriggers__.appendChild(expandTrigger);\n                element.__resizeTriggers__.appendChild(contractTrigger);\n                element.appendChild(element.__resizeTriggers__);\n                resetTriggers(element);\n                element.addEventListener("scroll", scrollListener, true);\n                /* Listen for a css animation to detect element display/re-attach */ if (animationStartEvent) {\n                    element.__resizeTriggers__.__animationListener__ = function animationListener(e) {\n                        if (e.animationName === animationName) resetTriggers(element);\n                    };\n                    element.__resizeTriggers__.addEventListener(animationStartEvent, element.__resizeTriggers__.__animationListener__);\n                }\n            }\n            element.__resizeListeners__.push(fn);\n        }\n    };\n    const removeResizeListener = function(element, fn) {\n        if (attachEvent) element.detachEvent("onresize", fn);\n        else {\n            element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);\n            if (!element.__resizeListeners__.length) {\n                element.removeEventListener("scroll", scrollListener, true);\n                if (element.__resizeTriggers__.__animationListener__) {\n                    element.__resizeTriggers__.removeEventListener(animationStartEvent, element.__resizeTriggers__.__animationListener__);\n                    element.__resizeTriggers__.__animationListener__ = null;\n                }\n                try {\n                    element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);\n                } catch (e) {\n                // Preact compat; see developit/preact-compat/issues/228\n                }\n            }\n        }\n    };\n    return {\n        addResizeListener: addResizeListener,\n        removeResizeListener: removeResizeListener\n    };\n}\n$3e40d2fd7fdb47d2$exports = {\n    createDetectElementResize: $3e40d2fd7fdb47d2$var$createDetectElementResize\n};\n\n\nfunction $6e2bb92d9db3b0c8$var$_defineProperty(obj, key, value) {\n    key = $6e2bb92d9db3b0c8$var$_toPropertyKey(key);\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\nfunction $6e2bb92d9db3b0c8$var$_toPropertyKey(arg) {\n    var key = $6e2bb92d9db3b0c8$var$_toPrimitive(arg, "string");\n    return typeof key === "symbol" ? key : String(key);\n}\nfunction $6e2bb92d9db3b0c8$var$_toPrimitive(input, hint) {\n    if (typeof input !== "object" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || "default");\n        if (typeof res !== "object") return res;\n        throw new TypeError("@@toPrimitive must return a primitive value.");\n    }\n    return (hint === "string" ? String : Number)(input);\n}\nclass $6e2bb92d9db3b0c8$export$9d94f4ee1d930ff extends (0, react__WEBPACK_IMPORTED_MODULE_0__.Component) {\n    constructor(...args){\n        super(...args);\n        $6e2bb92d9db3b0c8$var$_defineProperty(this, "state", {\n            height: this.props.defaultHeight || 0,\n            scaledHeight: this.props.defaultHeight || 0,\n            scaledWidth: this.props.defaultWidth || 0,\n            width: this.props.defaultWidth || 0\n        });\n        $6e2bb92d9db3b0c8$var$_defineProperty(this, "_autoSizer", null);\n        $6e2bb92d9db3b0c8$var$_defineProperty(this, "_detectElementResize", null);\n        $6e2bb92d9db3b0c8$var$_defineProperty(this, "_parentNode", null);\n        $6e2bb92d9db3b0c8$var$_defineProperty(this, "_resizeObserver", null);\n        $6e2bb92d9db3b0c8$var$_defineProperty(this, "_onResize", ()=>{\n            const { disableHeight: disableHeight , disableWidth: disableWidth , onResize: onResize  } = this.props;\n            if (this._parentNode) {\n                var _style$paddingLeft, _style$paddingRight, _style$paddingTop, _style$paddingBottom;\n                // Guard against AutoSizer component being removed from the DOM immediately after being added.\n                // This can result in invalid style values which can result in NaN values if we don\'t handle them.\n                // See issue #150 for more context.\n                const style = window.getComputedStyle(this._parentNode) || {};\n                const paddingLeft = parseInt((_style$paddingLeft = style.paddingLeft) !== null && _style$paddingLeft !== void 0 ? _style$paddingLeft : "0", 10);\n                const paddingRight = parseInt((_style$paddingRight = style.paddingRight) !== null && _style$paddingRight !== void 0 ? _style$paddingRight : "0", 10);\n                const paddingTop = parseInt((_style$paddingTop = style.paddingTop) !== null && _style$paddingTop !== void 0 ? _style$paddingTop : "0", 10);\n                const paddingBottom = parseInt((_style$paddingBottom = style.paddingBottom) !== null && _style$paddingBottom !== void 0 ? _style$paddingBottom : "0", 10);\n                const rect = this._parentNode.getBoundingClientRect();\n                const scaledHeight = rect.height - paddingTop - paddingBottom;\n                const scaledWidth = rect.width - paddingLeft - paddingRight;\n                const height = this._parentNode.offsetHeight - paddingTop - paddingBottom;\n                const width = this._parentNode.offsetWidth - paddingLeft - paddingRight;\n                if (!disableHeight && (this.state.height !== height || this.state.scaledHeight !== scaledHeight) || !disableWidth && (this.state.width !== width || this.state.scaledWidth !== scaledWidth)) {\n                    this.setState({\n                        height: height,\n                        width: width,\n                        scaledHeight: scaledHeight,\n                        scaledWidth: scaledWidth\n                    });\n                    if (typeof onResize === "function") onResize({\n                        height: height,\n                        scaledHeight: scaledHeight,\n                        scaledWidth: scaledWidth,\n                        width: width\n                    });\n                }\n            }\n        });\n        $6e2bb92d9db3b0c8$var$_defineProperty(this, "_setRef", (autoSizer)=>{\n            this._autoSizer = autoSizer;\n        });\n    }\n    componentDidMount() {\n        const { nonce: nonce  } = this.props;\n        if (this._autoSizer && this._autoSizer.parentNode && this._autoSizer.parentNode.ownerDocument && this._autoSizer.parentNode.ownerDocument.defaultView && this._autoSizer.parentNode instanceof this._autoSizer.parentNode.ownerDocument.defaultView.HTMLElement) {\n            // Delay access of parentNode until mount.\n            // This handles edge-cases where the component has already been unmounted before its ref has been set,\n            // As well as libraries like react-lite which have a slightly different lifecycle.\n            this._parentNode = this._autoSizer.parentNode;\n            // Defer requiring resize handler in order to support server-side rendering.\n            // See issue #41\n            if (this._parentNode != null) {\n                if (typeof ResizeObserver !== "undefined") {\n                    this._resizeObserver = new ResizeObserver(()=>{\n                        // Guard against "ResizeObserver loop limit exceeded" error;\n                        // could be triggered if the state update causes the ResizeObserver handler to run long.\n                        // See https://github.com/bvaughn/react-virtualized-auto-sizer/issues/55\n                        setTimeout(this._onResize, 0);\n                    });\n                    this._resizeObserver.observe(this._parentNode);\n                } else {\n                    this._detectElementResize = (0, $3e40d2fd7fdb47d2$exports.createDetectElementResize)(nonce);\n                    this._detectElementResize.addResizeListener(this._parentNode, this._onResize);\n                }\n                this._onResize();\n            }\n        }\n    }\n    componentWillUnmount() {\n        if (this._parentNode) {\n            if (this._detectElementResize) this._detectElementResize.removeResizeListener(this._parentNode, this._onResize);\n            if (this._resizeObserver) {\n                this._resizeObserver.observe(this._parentNode);\n                this._resizeObserver.disconnect();\n            }\n        }\n    }\n    render() {\n        const { children: children , defaultHeight: defaultHeight , defaultWidth: defaultWidth , disableHeight: disableHeight , disableWidth: disableWidth , nonce: nonce , onResize: onResize , style: style , tagName: tagName = "div" , ...rest } = this.props;\n        const { height: height , scaledHeight: scaledHeight , scaledWidth: scaledWidth , width: width  } = this.state;\n        // Outer div should not force width/height since that may prevent containers from shrinking.\n        // Inner component should overflow and use calculated width/height.\n        // See issue #68 for more information.\n        const outerStyle = {\n            overflow: "visible"\n        };\n        const childParams = {};\n        // Avoid rendering children before the initial measurements have been collected.\n        // At best this would just be wasting cycles.\n        let bailoutOnChildren = false;\n        if (!disableHeight) {\n            if (height === 0) bailoutOnChildren = true;\n            outerStyle.height = 0;\n            childParams.height = height;\n            childParams.scaledHeight = scaledHeight;\n        }\n        if (!disableWidth) {\n            if (width === 0) bailoutOnChildren = true;\n            outerStyle.width = 0;\n            childParams.width = width;\n            childParams.scaledWidth = scaledWidth;\n        }\n        return (0, react__WEBPACK_IMPORTED_MODULE_0__.createElement)(tagName, {\n            ref: this._setRef,\n            style: {\n                ...outerStyle,\n                ...style\n            },\n            ...rest\n        }, !bailoutOnChildren && children(childParams));\n    }\n}\n$6e2bb92d9db3b0c8$var$_defineProperty($6e2bb92d9db3b0c8$export$9d94f4ee1d930ff, "defaultProps", {\n    onResize: ()=>{},\n    disableHeight: false,\n    disableWidth: false,\n    style: {}\n});\n\n\nvar $149c1bd638913645$export$2e2bcd8739ae039 = (0, $6e2bb92d9db3b0c8$export$9d94f4ee1d930ff);\n\n\n\n//# sourceMappingURL=react-virtualized-auto-sizer.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9688\n')}}]);