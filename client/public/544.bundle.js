"use strict";(self.webpackChunkweb_app=self.webpackChunkweb_app||[]).push([[544],{544:function(__unused_webpack_module,exports,__webpack_require__){eval('\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = exports.Teams = void 0;\nvar _NavBar = _interopRequireDefault(__webpack_require__(8334));\nvar _react = _interopRequireWildcard(__webpack_require__(7294));\nvar _reactRedux = __webpack_require__(6706);\nvar _Page = _interopRequireDefault(__webpack_require__(5694));\nvar _selectors = __webpack_require__(6657);\nvar _nation = __webpack_require__(6381);\nvar _Pagination = _interopRequireDefault(__webpack_require__(580));\nvar _material = __webpack_require__(8410);\nvar _reactRouterDom = __webpack_require__(9818);\nvar _EnhancedTable = _interopRequireDefault(__webpack_require__(2265));\nvar _util = __webpack_require__(1054);\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar MAX_ROWS_PER_PAGE = 50;\nvar COLUMN_TO_EXCLUDE = ["uid"];\nvar Teams = function Teams(props) {\n  var navigate = (0, _reactRouterDom.useNavigate)();\n  var dispatch = (0, _reactRedux.useDispatch)();\n  var nations = props.nations;\n  var _useState = (0, _react.useState)(1),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentPage = _useState2[0],\n    setCurrentPage = _useState2[1];\n  var _useState3 = (0, _react.useState)("All"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    continentFilter = _useState4[0],\n    setContinentFilter = _useState4[1];\n  (0, _react.useEffect)(function () {\n    // dispatch both actions at the same time to get the data faster\n    dispatch((0, _nation.getNationsRequest)());\n    dispatch((0, _nation.getContinentsRequest)());\n    return function () {\n      // cleanup\n      window.filteredNationsLength = 0;\n    };\n  }, [dispatch]);\n  var onRowClick = function onRowClick(nation) {\n    var actualNation = (0, _util.getCharactersFromString)(nation.Country);\n\n    // make nation country be actualNation\n    nation.Country = actualNation;\n    dispatch((0, _nation.fetchPaginatedResultsRequest)(actualNation, 1));\n    navigate("/teams/" + actualNation, {\n      state: {\n        team: nation\n      }\n    });\n  };\n  var handlePageClick = function handlePageClick(event, page) {\n    setCurrentPage(event);\n  };\n\n  // use memo run first time and then only when the dependencies change\n  var filteredNations = (0, _react.useMemo)(function () {\n    // filter by continent\n    var filteredNations = nations.filter(function (nation) {\n      if (continentFilter === "All") {\n        return true;\n      }\n      return nation.Continent === continentFilter;\n    });\n\n    // keep a reference of the filtered nations length before we slice it for pagination\n    var filteredNationsLength = filteredNations.length;\n    window.filteredNationsLength = filteredNationsLength;\n\n    // filter by page\n    filteredNations = filteredNations.slice((currentPage - 1) * MAX_ROWS_PER_PAGE, (currentPage - 1) * MAX_ROWS_PER_PAGE + MAX_ROWS_PER_PAGE);\n    return filteredNations;\n  }, [nations, currentPage, continentFilter]);\n\n  // if nations is empty, return null\n  if (nations.length === 0) {\n    return /*#__PURE__*/_react.default.createElement(_Page.default, {\n      title: "Teams"\n    }, /*#__PURE__*/_react.default.createElement(_NavBar.default, null), /*#__PURE__*/_react.default.createElement(_material.Typography, {\n      variant: "h1"\n    }, "Teams"), /*#__PURE__*/_react.default.createElement(_material.Typography, {\n      variant: "h2"\n    }, "Loading..."));\n  }\n\n  /* get properties of the first nation */\n  var columns = Object.keys(nations[0]).map(function (key) {\n    return {\n      id: key,\n      label: key,\n      minWidth: 170,\n      align: "center",\n      format: function format(value) {\n        return value.toLocaleString("en-US");\n      }\n    };\n  });\n\n  /* remove uid from columns */\n  columns = columns.filter(function (column) {\n    return !COLUMN_TO_EXCLUDE.includes(column.id);\n  });\n  return /*#__PURE__*/_react.default.createElement(_Page.default, null, /*#__PURE__*/_react.default.createElement(_NavBar.default, null), /*#__PURE__*/_react.default.createElement("div", {\n    style: {\n      display: "flex",\n      justifyContent: "left",\n      gap: "16px",\n      padding: "16px 0"\n    }\n  }, props.continents.map(function (continent) {\n    return /*#__PURE__*/_react.default.createElement(_material.Tooltip\n    // make the tooltip show that user can click to un/select\n    , {\n      title: continentFilter === continent ? "Click to deselect" : "Click to select",\n      key: continent\n      // add position to make the tooltip show on top of the button\n      ,\n      placement: "top"\n    }, /*#__PURE__*/_react.default.createElement("button", {\n      key: continent,\n      onClick: function onClick() {\n        if (continentFilter === continent) {\n          setContinentFilter("All");\n          setCurrentPage(1);\n          return;\n        }\n        // set the filter\n        setCurrentPage(1);\n        setContinentFilter(continent);\n      },\n      style: {\n        backgroundColor: continentFilter === continent ? "#3f51b5" : "#FFF",\n        color: continentFilter === continent ? "#FFF" : "#3f51b5",\n        border: "1px solid #3f51b5",\n        borderRadius: "5px",\n        // make them bigger\n        padding: "8px 16px",\n        // make them bold\n        fontWeight: "bold",\n        "&:hover": {\n          backgroundColor: "#3f51b5",\n          color: "#FFF",\n          // change the mouse to pointer\n          cursor: "pointer",\n          position: "relative"\n        },\n        "&:focus": {\n          outline: "none"\n        }\n      }\n    }, continent));\n  })), /*#__PURE__*/_react.default.createElement(_EnhancedTable.default, {\n    rows: filteredNations,\n    columns: columns,\n    onRowClick: onRowClick,\n    preSort: false\n  }), /*#__PURE__*/_react.default.createElement("div", {\n    style: {\n      position: "sticky",\n      bottom: 0,\n      display: "flex",\n      justifyContent: "center",\n      gap: "16px",\n      py: "16px",\n      backgroundColor: "#FFF"\n    }\n  }, /*#__PURE__*/_react.default.createElement(_Pagination.default, {\n    page: currentPage,\n    totalPages:\n    // based on continent filter\n    continentFilter === "All" ? Math.ceil(nations.length / MAX_ROWS_PER_PAGE) : Math.ceil(window.filteredNationsLength / MAX_ROWS_PER_PAGE),\n    onChangePage: handlePageClick,\n    rowsPerPage: 10\n  })));\n};\nexports.Teams = Teams;\nTeams.propTypes = {};\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    nations: (0, _selectors.getNations)(state),\n    continents: (0, _selectors.getContinents)(state)\n  };\n};\nvar mapDispatchToProps = {\n  // getNationsRequest,\n  getNations: _selectors.getNations\n};\nvar _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Teams);\nexports["default"] = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///544\n')}}]);